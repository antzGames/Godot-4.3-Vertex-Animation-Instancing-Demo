[gd_resource type="ShaderMaterial" load_steps=5 format=3 uid="uid://csgi0ou62n0ma"]

[ext_resource type="Texture2D" uid="uid://danxgkmg1reb" path="res://assets/mage/normals.png" id="1_amnau"]
[ext_resource type="Texture2D" uid="uid://dj2hkmdic5hc0" path="res://assets/mage/offsets.exr" id="2_c273e"]
[ext_resource type="Texture2D" uid="uid://bf6d2bhwnbwba" path="res://assets/mage/texture0.png" id="3_7ts35"]

[sub_resource type="Shader" id="1"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

uniform sampler2D offset_map;
uniform sampler2D normal_map;
uniform sampler2D texture_albedo;

uniform float fps = 24.0; // change this to what the fps is in Blender
uniform float frames = 40;

uniform float specular : hint_range(0,1);
uniform float metallic : hint_range(0,1);
uniform float roughness : hint_range(0,1);

varying flat vec4 custom_data;

void vertex(){
	custom_data = INSTANCE_CUSTOM;

	float start_frame = frames * custom_data.g + 1.0; // start frame for track one should be 1.0
	float end_frame = start_frame + frames - 1.0; 
	float num_frames = end_frame - start_frame;
	int frame_count = int(end_frame - start_frame);

	// time
	float time_scale_normalized = fps / num_frames;
	float time = mod(TIME * time_scale_normalized, 1.0);
	
	float frame_offset = num_frames * custom_data.a;
	float current_frame = start_frame + mod((time * num_frames) + frame_offset, num_frames);

	ivec2 tex_size = textureSize(offset_map, 0);

	float pixel_size = 1.0 / float(tex_size.y);
	float frame_floor = clamp(floor(current_frame), start_frame, end_frame);
	float frame_ceil = float(int(ceil(current_frame) - start_frame) % frame_count) + start_frame; // accounting for looping

	vec2 frame_floor_uv_offset = vec2(0.0, -((frame_floor + 0.5) * pixel_size));
	vec2 frame_ceil_uv_offset = vec2(0.0, -((frame_ceil + 0.5) * pixel_size));

	float lerp_factor = current_frame - frame_floor;

	vec3 offset_floor = texture(offset_map, UV2 + frame_floor_uv_offset).xyz;
	vec3 offset_ceil = texture(offset_map, UV2 + frame_ceil_uv_offset).xyz;
	vec3 offset_lerp = mix(offset_floor, offset_ceil, lerp_factor);
	vec3 new_offset = vec3(offset_lerp.x, offset_lerp.z, offset_lerp.y);

	VERTEX += new_offset;

	vec3 normal_floor = texture(normal_map, UV2 + frame_floor_uv_offset).xyz;
	vec3 normal_ceil = texture(normal_map, UV2 + frame_ceil_uv_offset).xyz;
	vec3 normal_lerp = mix(normal_floor, normal_ceil, lerp_factor);
	vec3 new_normal = vec3((normal_lerp.x * 2.0) - 1.0, (normal_lerp.z * 2.0) - 1.0, (normal_lerp.y * 2.0) - 1.0);

	NORMAL = new_normal;
}

void fragment(){
	vec3 albedo_col = texture(texture_albedo, UV).rgb;

	ALBEDO = mix(albedo_col.rgb, COLOR.rgb, 0.25); // change mix ratio to you needs.
	METALLIC = metallic;
	ROUGHNESS = roughness;
	SPECULAR = specular;
}
"

[resource]
render_priority = 0
shader = SubResource("1")
shader_parameter/fps = 24.0
shader_parameter/frames = 40.0
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.5
shader_parameter/roughness = 0.5
shader_parameter/offset_map = ExtResource("2_c273e")
shader_parameter/normal_map = ExtResource("1_amnau")
shader_parameter/texture_albedo = ExtResource("3_7ts35")
